{
  "name": "Multi-AI Research Assistant",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "id": "manual-trigger-001",
      "name": "Research Query Input",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [200, 400]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.perplexity.ai/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpHeaderAuth",
        "options": {},
        "headerParametersUi": {
          "parameter": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "bodyContentType": "json",
        "body": "={\n  \"model\": \"llama-3.1-sonar-small-128k-online\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are a helpful research assistant. Provide accurate, well-sourced information.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"{{ $json.query || 'What are the latest developments in AI?' }}\"\n    }\n  ],\n  \"max_tokens\": 1000,\n  \"temperature\": 0.2\n}"
      },
      "id": "perplexity-search",
      "name": "Perplexity Research",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [400, 300],
      "credentials": {
        "httpHeaderAuth": {
          "id": "perplexity-api",
          "name": "Perplexity API"
        }
      }
    },
    {
      "parameters": {
        "resource": "text",
        "operation": "message",
        "options": {},
        "requestBody": {
          "model": "gpt-3.5-turbo",
          "messages": [
            {
              "role": "system",
              "content": "You are a helpful assistant. Provide clear, concise answers."
            },
            {
              "role": "user",
              "content": "={{ $node['Research Query Input'].json.query || 'What are the latest developments in AI?' }}"
            }
          ],
          "max_tokens": 1000,
          "temperature": 0.7
        }
      },
      "id": "openai-response",
      "name": "ChatGPT Analysis",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [400, 400],
      "credentials": {
        "openAiApi": {
          "id": "openai-main",
          "name": "OpenAI-Main"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.anthropic.com/v1/messages",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpHeaderAuth",
        "options": {},
        "headerParametersUi": {
          "parameter": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "anthropic-version",
              "value": "2023-06-01"
            }
          ]
        },
        "bodyContentType": "json",
        "body": "={\n  \"model\": \"claude-3-sonnet-20240229\",\n  \"max_tokens\": 1000,\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"{{ $node['Research Query Input'].json.query || 'What are the latest developments in AI?' }}\"\n    }\n  ]\n}"
      },
      "id": "claude-analysis",
      "name": "Claude Analysis",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [400, 500],
      "credentials": {
        "httpHeaderAuth": {
          "id": "claude-api",
          "name": "Claude-API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Multi-AI Response Analyzer and Comparator\nconst query = $node['Research Query Input'].json.query || 'What are the latest developments in AI?';\n\n// Extract responses from each AI\nconst perplexityResponse = $input.first().json.choices[0].message.content;\nconst chatgptResponse = $input.item(1).json.choices[0].message.content;\nconst claudeResponse = $input.last().json.content[0].text;\n\n// Analyze response characteristics\nfunction analyzeResponse(text, source) {\n  return {\n    source: source,\n    length: text.length,\n    wordCount: text.split(/\\s+/).length,\n    sentenceCount: text.split(/[.!?]+/).length - 1,\n    hasLinks: text.includes('http'),\n    hasCitations: text.includes('[') || text.includes('('),\n    tone: analyzeTone(text),\n    keyTopics: extractKeyTopics(text)\n  };\n}\n\nfunction analyzeTone(text) {\n  const lowerText = text.toLowerCase();\n  if (lowerText.includes('exciting') || lowerText.includes('promising') || lowerText.includes('breakthrough')) {\n    return 'optimistic';\n  } else if (lowerText.includes('challenge') || lowerText.includes('concern') || lowerText.includes('risk')) {\n    return 'cautious';\n  } else {\n    return 'neutral';\n  }\n}\n\nfunction extractKeyTopics(text) {\n  const keywords = ['AI', 'machine learning', 'neural network', 'deep learning', 'automation', 'technology', 'algorithm'];\n  return keywords.filter(keyword => text.toLowerCase().includes(keyword.toLowerCase()));\n}\n\n// Calculate similarity between responses\nfunction calculateSimilarity(text1, text2) {\n  const words1 = new Set(text1.toLowerCase().split(/\\W+/));\n  const words2 = new Set(text2.toLowerCase().split(/\\W+/));\n  \n  const intersection = new Set([...words1].filter(x => words2.has(x)));\n  const union = new Set([...words1, ...words2]);\n  \n  return Math.round((intersection.size / union.size) * 100);\n}\n\n// Generate comprehensive analysis\nconst analysis = {\n  query: query,\n  timestamp: new Date().toISOString(),\n  responses: {\n    perplexity: {\n      text: perplexityResponse,\n      analysis: analyzeResponse(perplexityResponse, 'Perplexity')\n    },\n    chatgpt: {\n      text: chatgptResponse,\n      analysis: analyzeResponse(chatgptResponse, 'ChatGPT')\n    },\n    claude: {\n      text: claudeResponse,\n      analysis: analyzeResponse(claudeResponse, 'Claude')\n    }\n  },\n  comparison: {\n    similarities: {\n      perplexity_vs_chatgpt: calculateSimilarity(perplexityResponse, chatgptResponse),\n      perplexity_vs_claude: calculateSimilarity(perplexityResponse, claudeResponse),\n      chatgpt_vs_claude: calculateSimilarity(chatgptResponse, claudeResponse)\n    },\n    averageSimilarity: Math.round(\n      (calculateSimilarity(perplexityResponse, chatgptResponse) +\n       calculateSimilarity(perplexityResponse, claudeResponse) +\n       calculateSimilarity(chatgptResponse, claudeResponse)) / 3\n    ),\n    mostDetailed: {\n      byLength: [perplexityResponse, chatgptResponse, claudeResponse]\n        .map((text, index) => ({ text, length: text.length, source: ['Perplexity', 'ChatGPT', 'Claude'][index] }))\n        .sort((a, b) => b.length - a.length)[0].source,\n      byWordCount: [perplexityResponse, chatgptResponse, claudeResponse]\n        .map((text, index) => ({ text, wordCount: text.split(/\\s+/).length, source: ['Perplexity', 'ChatGPT', 'Claude'][index] }))\n        .sort((a, b) => b.wordCount - a.wordCount)[0].source\n    }\n  },\n  insights: {\n    consensus: calculateSimilarity(perplexityResponse, chatgptResponse) > 60 && \n              calculateSimilarity(perplexityResponse, claudeResponse) > 60 && \n              calculateSimilarity(chatgptResponse, claudeResponse) > 60 ? 'High' : 'Low',\n    uniquePerspectives: [\n      perplexityResponse.includes('http') ? 'Perplexity provides external sources' : null,\n      chatgptResponse.includes('examples') ? 'ChatGPT provides examples' : null,\n      claudeResponse.includes('analysis') ? 'Claude provides deep analysis' : null\n    ].filter(Boolean)\n  }\n};\n\nreturn analysis;"
      },
      "id": "multi-ai-analyzer",
      "name": "Multi-AI Analyzer",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [650, 400]
    },
    {
      "parameters": {
        "content": "=# 🤖 Multi-AI Research Report\n\n**Query:** {{ $json.query }}\n\n**Generated:** {{ $json.timestamp }}\n\n---\n\n## 🔍 Perplexity Research\n{{ $json.responses.perplexity.text }}\n\n**Analysis:**\n- Length: {{ $json.responses.perplexity.analysis.length }} characters\n- Word Count: {{ $json.responses.perplexity.analysis.wordCount }}\n- Tone: {{ $json.responses.perplexity.analysis.tone }}\n- Has Citations: {{ $json.responses.perplexity.analysis.hasCitations ? 'Yes' : 'No' }}\n\n---\n\n## 🤖 ChatGPT Analysis\n{{ $json.responses.chatgpt.text }}\n\n**Analysis:**\n- Length: {{ $json.responses.chatgpt.analysis.length }} characters\n- Word Count: {{ $json.responses.chatgpt.analysis.wordCount }}\n- Tone: {{ $json.responses.chatgpt.analysis.tone }}\n\n---\n\n## 🧠 Claude Analysis\n{{ $json.responses.claude.text }}\n\n**Analysis:**\n- Length: {{ $json.responses.claude.analysis.length }} characters\n- Word Count: {{ $json.responses.claude.analysis.wordCount }}\n- Tone: {{ $json.responses.claude.analysis.tone }}\n\n---\n\n## 📊 Comparison Insights\n\n### Similarity Scores\n- Perplexity vs ChatGPT: {{ $json.comparison.similarities.perplexity_vs_chatgpt }}%\n- Perplexity vs Claude: {{ $json.comparison.similarities.perplexity_vs_claude }}%\n- ChatGPT vs Claude: {{ $json.comparison.similarities.chatgpt_vs_claude }}%\n- **Average Similarity:** {{ $json.comparison.averageSimilarity }}%\n\n### Key Findings\n- **Most Detailed Response:** {{ $json.comparison.mostDetailed.byLength }}\n- **Consensus Level:** {{ $json.insights.consensus }}\n- **Unique Perspectives:** {{ $json.insights.uniquePerspectives.join(', ') || 'None identified' }}\n\n---\n\n## 🎯 Recommendation\n\n{{ $json.comparison.averageSimilarity > 70 ? '✅ **High Consensus**: All AI models agree on the main points. Information is likely reliable.' : $json.comparison.averageSimilarity > 40 ? '⚠️ **Moderate Consensus**: Some agreement between models. Cross-reference recommended.' : '❌ **Low Consensus**: Significant differences in responses. Further research needed.' }}\n\n---\n\n*Generated by Multi-AI Research Assistant*",
        "options": {}
      },
      "id": "format-report",
      "name": "Generate Research Report",
      "type": "n8n-nodes-base.markdown",
      "typeVersion": 1,
      "position": [850, 400]
    }
  ],
  "connections": {
    "Research Query Input": {
      "main": [
        [
          {
            "node": "Perplexity Research",
            "type": "main",
            "index": 0
          },
          {
            "node": "ChatGPT Analysis",
            "type": "main",
            "index": 0
          },
          {
            "node": "Claude Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Perplexity Research": {
      "main": [
        [
          {
            "node": "Multi-AI Analyzer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ChatGPT Analysis": {
      "main": [
        [
          {
            "node": "Multi-AI Analyzer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Claude Analysis": {
      "main": [
        [
          {
            "node": "Multi-AI Analyzer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Multi-AI Analyzer": {
      "main": [
        [
          {
            "node": "Generate Research Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": ["ai", "research", "multi-model", "perplexity", "chatgpt", "claude"],
  "triggerCount": 0,
  "updatedAt": "2025-06-07T12:30:00.000Z",
  "versionId": "1"
}
