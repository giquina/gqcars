generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  phone     String?
  name      String
  password  String
  role      String   @default("CUSTOMER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customerProfile CustomerProfile?
  corporateAccount CorporateAccount? @relation(fields: [corporateAccountId], references: [id])
  corporateAccountId String?
  bookings  Booking[]
  emergencyContacts EmergencyContact[]

  @@map("users")
}

model CustomerProfile {
  id            String @id @default(cuid())
  userId        String @unique
  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  loyaltyPoints Int    @default(0)
  preferredPayment String?
  homeAddress   String?
  workAddress   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("customer_profiles")
}

model CorporateAccount {
  id            String @id @default(cuid())
  companyName   String
  companyAddress String
  vatNumber     String?
  contactEmail  String
  contactPhone  String
  billingEmail  String
  users         User[]
  bookings      Booking[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("corporate_accounts")
}

model Driver {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  phone         String
  licenseNumber String   @unique
  siaLicense    String   @unique
  expiryDate    DateTime
  status        String   @default("AVAILABLE")
  vehicle       Vehicle?
  bookings      Booking[]
  rating        Float    @default(5.0)
  totalTrips    Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("drivers")
}

model Vehicle {
  id              String @id @default(cuid())
  driverId        String @unique
  driver          Driver @relation(fields: [driverId], references: [id], onDelete: Cascade)
  make            String
  model           String
  year            Int
  color           String
  licensePlate    String @unique
  vehicleType     String
  insuranceExpiry DateTime
  motExpiry       DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("vehicles")
}

model Booking {
  id                String    @id @default(cuid())
  bookingReference  String    @unique
  userId            String
  user              User      @relation(fields: [userId], references: [id])
  corporateAccountId String?
  corporateAccount   CorporateAccount? @relation(fields: [corporateAccountId], references: [id])
  driverId          String?
  driver            Driver?   @relation(fields: [driverId], references: [id])
  serviceType       String
  vehicleType       String
  pickupAddress     String
  pickupLat         Float?
  pickupLng         Float?
  destinationAddress String
  destinationLat    Float?
  destinationLng    Float?
  scheduledDateTime DateTime
  actualPickupTime  DateTime?
  actualDropoffTime DateTime?
  estimatedPrice    Float
  finalPrice        Float?
  currency          String    @default("GBP")
  status            String    @default("PENDING")
  paymentId         String?
  paymentStatus     String    @default("PENDING")
  specialRequirements String?
  securityLevel     String    @default("STANDARD")
  trackingUpdates   TrackingUpdate[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@map("bookings")
}

model TrackingUpdate {
  id        String   @id @default(cuid())
  bookingId String
  booking   Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  latitude  Float
  longitude Float
  status    String
  timestamp DateTime @default(now())

  @@map("tracking_updates")
}

model EmergencyContact {
  id          String @id @default(cuid())
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  phone       String
  relationship String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("emergency_contacts")
}

model Payment {
  id              String   @id @default(cuid())
  bookingId       String
  stripePaymentId String   @unique
  amount          Float
  currency        String   @default("GBP")
  status          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("payments")
}