generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  phone     String?
  name      String
  password  String
  role      String @default("CUSTOMER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Customer profile
  customerProfile CustomerProfile?
  
  // Corporate account association
  corporateAccount CorporateAccount? @relation(fields: [corporateAccountId], references: [id])
  corporateAccountId String?

  // Bookings
  bookings  Booking[]
  
  // Emergency contacts
  emergencyContacts EmergencyContact[]

  @@map("users")
}

model CustomerProfile {
  id                String @id @default(cuid())
  userId            String @unique
  user              User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  loyaltyPoints     Int    @default(0)
  preferredPayment  String?
  homeAddress       String?
  workAddress       String?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("customer_profiles")
}

model CorporateAccount {
  id              String @id @default(cuid())
  companyName     String
  companyAddress  String
  vatNumber       String?
  contactEmail    String
  contactPhone    String
  billingEmail    String
  
  // Users associated with this corporate account
  users           User[]
  
  // Bookings
  bookings        Booking[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("corporate_accounts")
}

model Driver {
  id              String      @id @default(cuid())
  name            String
  email           String      @unique
  phone           String
  licenseNumber   String      @unique
  siaLicense      String      @unique
  expiryDate      DateTime
  status          String @default("AVAILABLE")
  
  // Vehicle information
  vehicle         Vehicle?
  
  // Bookings
  bookings        Booking[]
  
  // Performance tracking
  rating          Float       @default(5.0)
  totalTrips      Int         @default(0)
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@map("drivers")
}

model Vehicle {
  id              String @id @default(cuid())
  driverId        String @unique
  driver          Driver @relation(fields: [driverId], references: [id], onDelete: Cascade)
  
  make            String
  model           String
  year            Int
  color           String
  licensePlate    String @unique
  vehicleType     String
  
  // Insurance and documents
  insuranceExpiry DateTime
  motExpiry       DateTime
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("vehicles")
}

model Booking {
  id                String        @id @default(cuid())
  bookingReference  String        @unique
  
  // Customer information
  userId            String
  user              User          @relation(fields: [userId], references: [id])
  
  // Corporate booking
  corporateAccountId String?
  corporateAccount   CorporateAccount? @relation(fields: [corporateAccountId], references: [id])
  
  // Driver assignment
  driverId          String?
  driver            Driver?       @relation(fields: [driverId], references: [id])
  
  // Service details
  serviceType       String
  vehicleType       String
  
  // Journey details
  pickupAddress     String
  pickupLat         Float?
  pickupLng         Float?
  destinationAddress String
  destinationLat    Float?
  destinationLng    Float?
  
  // Timing
  scheduledDateTime DateTime
  actualPickupTime  DateTime?
  actualDropoffTime DateTime?
  
  // Pricing
  estimatedPrice    Float
  finalPrice        Float?
  currency          String        @default("GBP")
  
  // Status
  status            String @default("PENDING")
  
  // Payment
  paymentId         String?
  paymentStatus     String @default("PENDING")
  
  // Special requirements
  specialRequirements String?
  securityLevel     String @default("STANDARD")
  
  // Tracking
  trackingUpdates   TrackingUpdate[]
  
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@map("bookings")
}

model TrackingUpdate {
  id        String   @id @default(cuid())
  bookingId String
  booking   Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  
  latitude  Float
  longitude Float
  status    String
  timestamp DateTime @default(now())

  @@map("tracking_updates")
}

model EmergencyContact {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  name         String
  phone        String
  relationship String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("emergency_contacts")
}

model Payment {
  id              String        @id @default(cuid())
  bookingId       String
  stripePaymentId String        @unique
  amount          Float
  currency        String        @default("GBP")
  status          String
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("payments")
}