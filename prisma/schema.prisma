// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  phone             String?  @unique
  emailVerified     DateTime?
  phoneVerified     DateTime?
  name              String?
  firstName         String?
  lastName          String?
  dateOfBirth       DateTime?
  avatar            String?
  password          String
  role              UserRole @default(CLIENT)
  status            UserStatus @default(ACTIVE)
  twoFactorEnabled  Boolean  @default(false)
  twoFactorSecret   String?
  recoveryCode      String?
  
  // Login tracking
  lastLogin         DateTime?
  loginAttempts     Int      @default(0)
  lockedUntil       DateTime?
  
  // GDPR & Compliance
  acceptedTerms     DateTime?
  acceptedPrivacy   DateTime?
  dataRetentionUntil DateTime?
  
  // Profile information
  companyName       String?
  companyVat        String?
  address           String?
  city              String?
  postcode          String?
  country           String   @default("UK")
  
  // SIA License information (for security personnel)
  siaLicenseNumber  String?
  siaExpiryDate     DateTime?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  sessions          Session[]
  accounts          Account[]
  bookings          Booking[]
  auditLogs         AuditLog[]
  loginHistory      LoginHistory[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  deviceInfo   String?
  ipAddress    String?
  userAgent    String?
  isActive     Boolean  @default(true)
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  type       TokenType @default(EMAIL_VERIFICATION)
  used       Boolean  @default(false)
  
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  resource  String?
  details   Json?
  ipAddress String?
  userAgent String?
  success   Boolean  @default(true)
  createdAt DateTime @default(now())
  
  user User? @relation(fields: [userId], references: [id])
  
  @@map("audit_logs")
}

model LoginHistory {
  id        String   @id @default(cuid())
  userId    String
  success   Boolean
  ipAddress String?
  userAgent String?
  location  String?
  reason    String?  // Failed reason if applicable
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("login_history")
}

model Booking {
  id            String        @id @default(cuid())
  userId        String
  serviceType   ServiceType
  status        BookingStatus @default(PENDING)
  
  // Booking details
  pickupAddress     String
  dropoffAddress    String?
  pickupDateTime    DateTime
  passengers        Int       @default(1)
  specialRequests   String?
  
  // Pricing
  estimatedPrice    Float?
  finalPrice        Float?
  currency          String    @default("GBP")
  
  // Additional requirements for security bookings
  securityLevel     SecurityLevel?
  riskAssessment    String?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id])
  
  @@map("bookings")
}

enum UserRole {
  CLIENT
  DRIVER
  SECURITY_PERSONNEL
  ADMIN
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

enum TokenType {
  EMAIL_VERIFICATION
  PHONE_VERIFICATION
  PASSWORD_RESET
  TWO_FACTOR
}

enum ServiceType {
  PRIVATE_HIRE
  CORPORATE
  VIP
  WEDDING
  CLOSE_PROTECTION
  EVENT_SECURITY
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum SecurityLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}