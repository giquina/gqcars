"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/whatwg-url";
exports.ids = ["vendor-chunks/whatwg-url"];
exports.modules = {

/***/ "(ssr)/../../node_modules/whatwg-url/lib/URL-impl.js":
/*!*****************************************************!*\
  !*** ../../node_modules/whatwg-url/lib/URL-impl.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nconst usm = __webpack_require__(/*! ./url-state-machine */ \"(ssr)/../../node_modules/whatwg-url/lib/url-state-machine.js\");\nexports.implementation = class URLImpl {\n  constructor(constructorArgs) {\n    const url = constructorArgs[0];\n    const base = constructorArgs[1];\n    let parsedBase = null;\n    if (base !== undefined) {\n      parsedBase = usm.basicURLParse(base);\n      if (parsedBase === \"failure\") {\n        throw new TypeError(\"Invalid base URL\");\n      }\n    }\n    const parsedURL = usm.basicURLParse(url, {\n      baseURL: parsedBase\n    });\n    if (parsedURL === \"failure\") {\n      throw new TypeError(\"Invalid URL\");\n    }\n    this._url = parsedURL;\n\n    // TODO: query stuff\n  }\n\n  get href() {\n    return usm.serializeURL(this._url);\n  }\n  set href(v) {\n    const parsedURL = usm.basicURLParse(v);\n    if (parsedURL === \"failure\") {\n      throw new TypeError(\"Invalid URL\");\n    }\n    this._url = parsedURL;\n  }\n  get origin() {\n    return usm.serializeURLOrigin(this._url);\n  }\n  get protocol() {\n    return this._url.scheme + \":\";\n  }\n  set protocol(v) {\n    usm.basicURLParse(v + \":\", {\n      url: this._url,\n      stateOverride: \"scheme start\"\n    });\n  }\n  get username() {\n    return this._url.username;\n  }\n  set username(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n    usm.setTheUsername(this._url, v);\n  }\n  get password() {\n    return this._url.password;\n  }\n  set password(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n    usm.setThePassword(this._url, v);\n  }\n  get host() {\n    const url = this._url;\n    if (url.host === null) {\n      return \"\";\n    }\n    if (url.port === null) {\n      return usm.serializeHost(url.host);\n    }\n    return usm.serializeHost(url.host) + \":\" + usm.serializeInteger(url.port);\n  }\n  set host(v) {\n    if (this._url.cannotBeABaseURL) {\n      return;\n    }\n    usm.basicURLParse(v, {\n      url: this._url,\n      stateOverride: \"host\"\n    });\n  }\n  get hostname() {\n    if (this._url.host === null) {\n      return \"\";\n    }\n    return usm.serializeHost(this._url.host);\n  }\n  set hostname(v) {\n    if (this._url.cannotBeABaseURL) {\n      return;\n    }\n    usm.basicURLParse(v, {\n      url: this._url,\n      stateOverride: \"hostname\"\n    });\n  }\n  get port() {\n    if (this._url.port === null) {\n      return \"\";\n    }\n    return usm.serializeInteger(this._url.port);\n  }\n  set port(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n    if (v === \"\") {\n      this._url.port = null;\n    } else {\n      usm.basicURLParse(v, {\n        url: this._url,\n        stateOverride: \"port\"\n      });\n    }\n  }\n  get pathname() {\n    if (this._url.cannotBeABaseURL) {\n      return this._url.path[0];\n    }\n    if (this._url.path.length === 0) {\n      return \"\";\n    }\n    return \"/\" + this._url.path.join(\"/\");\n  }\n  set pathname(v) {\n    if (this._url.cannotBeABaseURL) {\n      return;\n    }\n    this._url.path = [];\n    usm.basicURLParse(v, {\n      url: this._url,\n      stateOverride: \"path start\"\n    });\n  }\n  get search() {\n    if (this._url.query === null || this._url.query === \"\") {\n      return \"\";\n    }\n    return \"?\" + this._url.query;\n  }\n  set search(v) {\n    // TODO: query stuff\n\n    const url = this._url;\n    if (v === \"\") {\n      url.query = null;\n      return;\n    }\n    const input = v[0] === \"?\" ? v.substring(1) : v;\n    url.query = \"\";\n    usm.basicURLParse(input, {\n      url,\n      stateOverride: \"query\"\n    });\n  }\n  get hash() {\n    if (this._url.fragment === null || this._url.fragment === \"\") {\n      return \"\";\n    }\n    return \"#\" + this._url.fragment;\n  }\n  set hash(v) {\n    if (v === \"\") {\n      this._url.fragment = null;\n      return;\n    }\n    const input = v[0] === \"#\" ? v.substring(1) : v;\n    this._url.fragment = \"\";\n    usm.basicURLParse(input, {\n      url: this._url,\n      stateOverride: \"fragment\"\n    });\n  }\n  toJSON() {\n    return this.href;\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/whatwg-url/lib/URL-impl.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/whatwg-url/lib/URL.js":
/*!************************************************!*\
  !*** ../../node_modules/whatwg-url/lib/URL.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst conversions = __webpack_require__(/*! webidl-conversions */ \"(ssr)/../../node_modules/whatwg-url/node_modules/webidl-conversions/lib/index.js\");\nconst utils = __webpack_require__(/*! ./utils.js */ \"(ssr)/../../node_modules/whatwg-url/lib/utils.js\");\nconst Impl = __webpack_require__(/*! .//URL-impl.js */ \"(ssr)/../../node_modules/whatwg-url/lib/URL-impl.js\");\nconst impl = utils.implSymbol;\nfunction URL(url) {\n  if (!this || this[impl] || !(this instanceof URL)) {\n    throw new TypeError(\"Failed to construct 'URL': Please use the 'new' operator, this DOM object constructor cannot be called as a function.\");\n  }\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to construct 'URL': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n  const args = [];\n  for (let i = 0; i < arguments.length && i < 2; ++i) {\n    args[i] = arguments[i];\n  }\n  args[0] = conversions[\"USVString\"](args[0]);\n  if (args[1] !== undefined) {\n    args[1] = conversions[\"USVString\"](args[1]);\n  }\n  module.exports.setup(this, args);\n}\nURL.prototype.toJSON = function toJSON() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n  const args = [];\n  for (let i = 0; i < arguments.length && i < 0; ++i) {\n    args[i] = arguments[i];\n  }\n  return this[impl].toJSON.apply(this[impl], args);\n};\nObject.defineProperty(URL.prototype, \"href\", {\n  get() {\n    return this[impl].href;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].href = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nURL.prototype.toString = function () {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n  return this.href;\n};\nObject.defineProperty(URL.prototype, \"origin\", {\n  get() {\n    return this[impl].origin;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(URL.prototype, \"protocol\", {\n  get() {\n    return this[impl].protocol;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].protocol = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(URL.prototype, \"username\", {\n  get() {\n    return this[impl].username;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].username = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(URL.prototype, \"password\", {\n  get() {\n    return this[impl].password;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].password = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(URL.prototype, \"host\", {\n  get() {\n    return this[impl].host;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].host = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(URL.prototype, \"hostname\", {\n  get() {\n    return this[impl].hostname;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].hostname = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(URL.prototype, \"port\", {\n  get() {\n    return this[impl].port;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].port = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(URL.prototype, \"pathname\", {\n  get() {\n    return this[impl].pathname;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].pathname = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(URL.prototype, \"search\", {\n  get() {\n    return this[impl].search;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].search = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(URL.prototype, \"hash\", {\n  get() {\n    return this[impl].hash;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].hash = V;\n  },\n  enumerable: true,\n  configurable: true\n});\nmodule.exports = {\n  is(obj) {\n    return !!obj && obj[impl] instanceof Impl.implementation;\n  },\n  create(constructorArgs, privateData) {\n    let obj = Object.create(URL.prototype);\n    this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n    obj[impl] = new Impl.implementation(constructorArgs, privateData);\n    obj[impl][utils.wrapperSymbol] = obj;\n  },\n  interface: URL,\n  expose: {\n    Window: {\n      URL: URL\n    },\n    Worker: {\n      URL: URL\n    }\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL3doYXR3Zy11cmwvbGliL1VSTC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixNQUFNQSxXQUFXLEdBQUdDLG1CQUFPLENBQUMsNEdBQW9CLENBQUM7QUFDakQsTUFBTUMsS0FBSyxHQUFHRCxtQkFBTyxDQUFDLG9FQUFZLENBQUM7QUFDbkMsTUFBTUUsSUFBSSxHQUFHRixtQkFBTyxDQUFDLDJFQUFnQixDQUFDO0FBRXRDLE1BQU1HLElBQUksR0FBR0YsS0FBSyxDQUFDRyxVQUFVO0FBRTdCLFNBQVNDLEdBQUdBLENBQUNDLEdBQUcsRUFBRTtFQUNoQixJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQ0gsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLFlBQVlFLEdBQUcsQ0FBQyxFQUFFO0lBQ2pELE1BQU0sSUFBSUUsU0FBUyxDQUFDLHVIQUF1SCxDQUFDO0VBQzlJO0VBQ0EsSUFBSUMsU0FBUyxDQUFDQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0lBQ3hCLE1BQU0sSUFBSUYsU0FBUyxDQUFDLDJEQUEyRCxHQUFHQyxTQUFTLENBQUNDLE1BQU0sR0FBRyxXQUFXLENBQUM7RUFDbkg7RUFDQSxNQUFNQyxJQUFJLEdBQUcsRUFBRTtFQUNmLEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHSCxTQUFTLENBQUNDLE1BQU0sSUFBSUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFQSxDQUFDLEVBQUU7SUFDbERELElBQUksQ0FBQ0MsQ0FBQyxDQUFDLEdBQUdILFNBQVMsQ0FBQ0csQ0FBQyxDQUFDO0VBQ3hCO0VBQ0FELElBQUksQ0FBQyxDQUFDLENBQUMsR0FBR1gsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDVyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDM0MsSUFBSUEsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLRSxTQUFTLEVBQUU7SUFDM0JGLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBR1gs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QyxjQUFjO0VBQzFELENBQUM7RUFDREMsTUFBTUEsQ0FBQ0MsZUFBZSxFQUFFQyxXQUFXLEVBQUU7SUFDbkMsSUFBSUosR0FBRyxHQUFHbkIsTUFBTSxDQUFDcUIsTUFBTSxDQUFDcEMsR0FBRyxDQUFDVyxTQUFTLENBQUM7SUFDdEMsSUFBSSxDQUFDRCxLQUFLLENBQUN3QixHQUFHLEVBQUVHLGVBQWUsRUFBRUMsV0FBVyxDQUFDO0lBQzdDLE9BQU9KLEdBQUc7RUFDWixDQUFDO0VBQ0R4QixLQUFLQSxDQUFDd0IsR0FBRyxFQUFFRyxlQUFlLEVBQUVDLFdBQVcsRUFBRTtJQUN2QyxJQUFJLENBQUNBLFdBQVcsRUFBRUEsV0FBVyxHQUFHLENBQUMsQ0FBQztJQUNsQ0EsV0FBVyxDQUFDQyxPQUFPLEdBQUdMLEdBQUc7SUFFekJBLEdBQUcsQ0FBQ3BDLElBQUksQ0FBQyxHQUFHLElBQUlELElBQUksQ0FBQ3NDLGNBQWMsQ0FBQ0UsZUFBZSxFQUFFQyxXQUFXLENBQUM7SUFDakVKLEdBQUcsQ0FBQ3BDLElBQUksQ0FBQyxDQUFDRixLQUFLLENBQUM0QyxhQUFhLENBQUMsR0FBR04sR0FBRztFQUN0QyxDQUFDO0VBQ0RPLFNBQVMsRUFBRXpDLEdBQUc7RUFDZDBDLE1BQU0sRUFBRTtJQUNOQyxNQUFNLEVBQUU7TUFBRTNDLEdBQUcsRUFBRUE7SUFBSSxDQUFDO0lBQ3BCNEMsTUFBTSxFQUFFO01BQUU1QyxHQUFHLEVBQUVBO0lBQUk7RUFDckI7QUFDRixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGdxY2Fycy93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzL3doYXR3Zy11cmwvbGliL1VSTC5qcz84OWRiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBjb252ZXJzaW9ucyA9IHJlcXVpcmUoXCJ3ZWJpZGwtY29udmVyc2lvbnNcIik7XG5jb25zdCB1dGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzLmpzXCIpO1xuY29uc3QgSW1wbCA9IHJlcXVpcmUoXCIuLy9VUkwtaW1wbC5qc1wiKTtcblxuY29uc3QgaW1wbCA9IHV0aWxzLmltcGxTeW1ib2w7XG5cbmZ1bmN0aW9uIFVSTCh1cmwpIHtcbiAgaWYgKCF0aGlzIHx8IHRoaXNbaW1wbF0gfHwgISh0aGlzIGluc3RhbmNlb2YgVVJMKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGYWlsZWQgdG8gY29uc3RydWN0ICdVUkwnOiBQbGVhc2UgdXNlIHRoZSAnbmV3JyBvcGVyYXRvciwgdGhpcyBET00gb2JqZWN0IGNvbnN0cnVjdG9yIGNhbm5vdCBiZSBjYWxsZWQgYXMgYSBmdW5jdGlvbi5cIik7XG4gIH1cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAxKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZhaWxlZCB0byBjb25zdHJ1Y3QgJ1VSTCc6IDEgYXJndW1lbnQgcmVxdWlyZWQsIGJ1dCBvbmx5IFwiICsgYXJndW1lbnRzLmxlbmd0aCArIFwiIHByZXNlbnQuXCIpO1xuICB9XG4gIGNvbnN0IGFyZ3MgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoICYmIGkgPCAyOyArK2kpIHtcbiAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICB9XG4gIGFyZ3NbMF0gPSBjb252ZXJzaW9uc1tcIlVTVlN0cmluZ1wiXShhcmdzWzBdKTtcbiAgaWYgKGFyZ3NbMV0gIT09IHVuZGVmaW5lZCkge1xuICBhcmdzWzFdID0gY29udmVyc2lvbnNbXCJVU1ZTdHJpbmdcIl0oYXJnc1sxXSk7XG4gIH1cblxuICBtb2R1bGUuZXhwb3J0cy5zZXR1cCh0aGlzLCBhcmdzKTtcbn1cblxuVVJMLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gIGlmICghdGhpcyB8fCAhbW9kdWxlLmV4cG9ydHMuaXModGhpcykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSWxsZWdhbCBpbnZvY2F0aW9uXCIpO1xuICB9XG4gIGNvbnN0IGFyZ3MgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoICYmIGkgPCAwOyArK2kpIHtcbiAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICB9XG4gIHJldHVybiB0aGlzW2ltcGxdLnRvSlNPTi5hcHBseSh0aGlzW2ltcGxdLCBhcmdzKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVVJMLnByb3RvdHlwZSwgXCJocmVmXCIsIHtcbiAgZ2V0KCkge1xuICAgIHJldHVybiB0aGlzW2ltcGxdLmhyZWY7XG4gIH0sXG4gIHNldChWKSB7XG4gICAgViA9IGNvbnZlcnNpb25zW1wiVVNWU3RyaW5nXCJdKFYpO1xuICAgIHRoaXNbaW1wbF0uaHJlZiA9IFY7XG4gIH0sXG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZVxufSk7XG5cblVSTC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICghdGhpcyB8fCAhbW9kdWxlLmV4cG9ydHMuaXModGhpcykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSWxsZWdhbCBpbnZvY2F0aW9uXCIpO1xuICB9XG4gIHJldHVybiB0aGlzLmhyZWY7XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVVJMLnByb3RvdHlwZSwgXCJvcmlnaW5cIiwge1xuICBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXNbaW1wbF0ub3JpZ2luO1xuICB9LFxuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBjb25maWd1cmFibGU6IHRydWVcbn0pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVVJMLnByb3RvdHlwZSwgXCJwcm90b2NvbFwiLCB7XG4gIGdldCgpIHtcbiAgICByZXR1cm4gdGhpc1tpbXBsXS5wcm90b2NvbDtcbiAgfSxcbiAgc2V0KFYpIHtcbiAgICBWID0gY29udmVyc2lvbnNbXCJVU1ZTdHJpbmdcIl0oVik7XG4gICAgdGhpc1tpbXBsXS5wcm90b2NvbCA9IFY7XG4gIH0sXG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZVxufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShVUkwucHJvdG90eXBlLCBcInVzZXJuYW1lXCIsIHtcbiAgZ2V0KCkge1xuICAgIHJldHVybiB0aGlzW2ltcGxdLnVzZXJuYW1lO1xuICB9LFxuICBzZXQoVikge1xuICAgIFYgPSBjb252ZXJzaW9uc1tcIlVTVlN0cmluZ1wiXShWKTtcbiAgICB0aGlzW2ltcGxdLnVzZXJuYW1lID0gVjtcbiAgfSxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgY29uZmlndXJhYmxlOiB0cnVlXG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFVSTC5wcm90b3R5cGUsIFwicGFzc3dvcmRcIiwge1xuICBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXNbaW1wbF0ucGFzc3dvcmQ7XG4gIH0sXG4gIHNldChWKSB7XG4gICAgViA9IGNvbnZlcnNpb25zW1wiVVNWU3RyaW5nXCJdKFYpO1xuICAgIHRoaXNbaW1wbF0ucGFzc3dvcmQgPSBWO1xuICB9LFxuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBjb25maWd1cmFibGU6IHRydWVcbn0pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVVJMLnByb3RvdHlwZSwgXCJob3N0XCIsIHtcbiAgZ2V0KCkge1xuICAgIHJldHVybiB0aGlzW2ltcGxdLmhvc3Q7XG4gIH0sXG4gIHNldChWKSB7XG4gICAgViA9IGNvbnZlcnNpb25zW1wiVVNWU3RyaW5nXCJdKFYpO1xuICAgIHRoaXNbaW1wbF0uaG9zdCA9IFY7XG4gIH0sXG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZVxufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShVUkwucHJvdG90eXBlLCBcImhvc3RuYW1lXCIsIHtcbiAgZ2V0KCkge1xuICAgIHJldHVybiB0aGlzW2ltcGxdLmhvc3RuYW1lO1xuICB9LFxuICBzZXQoVikge1xuICAgIFYgPSBjb252ZXJzaW9uc1tcIlVTVlN0cmluZ1wiXShWKTtcbiAgICB0aGlzW2ltcGxdLmhvc3RuYW1lID0gVjtcbiAgfSxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgY29uZmlndXJhYmxlOiB0cnVlXG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFVSTC5wcm90b3R5cGUsIFwicG9ydFwiLCB7XG4gIGdldCgpIHtcbiAgICByZXR1cm4gdGhpc1tpbXBsXS5wb3J0O1xuICB9LFxuICBzZXQoVikge1xuICAgIFYgPSBjb252ZXJzaW9uc1tcIlVTVlN0cmluZ1wiXShWKTtcbiAgICB0aGlzW2ltcGxdLnBvcnQgPSBWO1xuICB9LFxuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBjb25maWd1cmFibGU6IHRydWVcbn0pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVVJMLnByb3RvdHlwZSwgXCJwYXRobmFtZVwiLCB7XG4gIGdldCgpIHtcbiAgICByZXR1cm4gdGhpc1tpbXBsXS5wYXRobmFtZTtcbiAgfSxcbiAgc2V0KFYpIHtcbiAgICBWID0gY29udmVyc2lvbnNbXCJVU1ZTdHJpbmdcIl0oVik7XG4gICAgdGhpc1tpbXBsXS5wYXRobmFtZSA9IFY7XG4gIH0sXG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZVxufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShVUkwucHJvdG90eXBlLCBcInNlYXJjaFwiLCB7XG4gIGdldCgpIHtcbiAgICByZXR1cm4gdGhpc1tpbXBsXS5zZWFyY2g7XG4gIH0sXG4gIHNldChWKSB7XG4gICAgViA9IGNvbnZlcnNpb25zW1wiVVNWU3RyaW5nXCJdKFYpO1xuICAgIHRoaXNbaW1wbF0uc2VhcmNoID0gVjtcbiAgfSxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgY29uZmlndXJhYmxlOiB0cnVlXG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFVSTC5wcm90b3R5cGUsIFwiaGFzaFwiLCB7XG4gIGdldCgpIHtcbiAgICByZXR1cm4gdGhpc1tpbXBsXS5oYXNoO1xuICB9LFxuICBzZXQoVikge1xuICAgIFYgPSBjb252ZXJzaW9uc1tcIlVTVlN0cmluZ1wiXShWKTtcbiAgICB0aGlzW2ltcGxdLmhhc2ggPSBWO1xuICB9LFxuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBjb25maWd1cmFibGU6IHRydWVcbn0pO1xuXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpcyhvYmopIHtcbiAgICByZXR1cm4gISFvYmogJiYgb2JqW2ltcGxdIGluc3RhbmNlb2YgSW1wbC5pbXBsZW1lbnRhdGlvbjtcbiAgfSxcbiAgY3JlYXRlKGNvbnN0cnVjdG9yQXJncywgcHJpdmF0ZURhdGEpIHtcbiAgICBsZXQgb2JqID0gT2JqZWN0LmNyZWF0ZShVUkwucHJvdG90eXBlKTtcbiAgICB0aGlzLnNldHVwKG9iaiwgY29uc3RydWN0b3JBcmdzLCBwcml2YXRlRGF0YSk7XG4gICAgcmV0dXJuIG9iajtcbiAgfSxcbiAgc2V0dXAob2JqLCBjb25zdHJ1Y3RvckFyZ3MsIHByaXZhdGVEYXRhKSB7XG4gICAgaWYgKCFwcml2YXRlRGF0YSkgcHJpdmF0ZURhdGEgPSB7fTtcbiAgICBwcml2YXRlRGF0YS53cmFwcGVyID0gb2JqO1xuXG4gICAgb2JqW2ltcGxdID0gbmV3IEltcGwuaW1wbGVtZW50YXRpb24oY29uc3RydWN0b3JBcmdzLCBwcml2YXRlRGF0YSk7XG4gICAgb2JqW2ltcGxdW3V0aWxzLndyYXBwZXJTeW1ib2xdID0gb2JqO1xuICB9LFxuICBpbnRlcmZhY2U6IFVSTCxcbiAgZXhwb3NlOiB7XG4gICAgV2luZG93OiB7IFVSTDogVVJMIH0sXG4gICAgV29ya2VyOiB7IFVSTDogVVJMIH1cbiAgfVxufTtcblxuIl0sIm5hbWVzIjpbImNvbnZlcnNpb25zIiwicmVxdWlyZSIsInV0aWxzIiwiSW1wbCIsImltcGwiLCJpbXBsU3ltYm9sIiwiVVJMIiwidXJsIiwiVHlwZUVycm9yIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXJncyIsImkiLCJ1bmRlZmluZWQiLCJtb2R1bGUiLCJleHBvcnRzIiwic2V0dXAiLCJwcm90b3R5cGUiLCJ0b0pTT04iLCJpcyIsImFwcGx5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJocmVmIiwic2V0IiwiViIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ0b1N0cmluZyIsIm9yaWdpbiIsInByb3RvY29sIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsImhvc3QiLCJob3N0bmFtZSIsInBvcnQiLCJwYXRobmFtZSIsInNlYXJjaCIsImhhc2giLCJvYmoiLCJpbXBsZW1lbnRhdGlvbiIsImNyZWF0ZSIsImNvbnN0cnVjdG9yQXJncyIsInByaXZhdGVEYXRhIiwid3JhcHBlciIsIndyYXBwZXJTeW1ib2wiLCJpbnRlcmZhY2UiLCJleHBvc2UiLCJXaW5kb3ciLCJXb3JrZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/whatwg-url/lib/URL.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/whatwg-url/lib/public-api.js":
/*!*******************************************************!*\
  !*** ../../node_modules/whatwg-url/lib/public-api.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nexports.URL = __webpack_require__(/*! ./URL */ \"(ssr)/../../node_modules/whatwg-url/lib/URL.js\")[\"interface\"];\nexports.serializeURL = __webpack_require__(/*! ./url-state-machine */ \"(ssr)/../../node_modules/whatwg-url/lib/url-state-machine.js\").serializeURL;\nexports.serializeURLOrigin = __webpack_require__(/*! ./url-state-machine */ \"(ssr)/../../node_modules/whatwg-url/lib/url-state-machine.js\").serializeURLOrigin;\nexports.basicURLParse = __webpack_require__(/*! ./url-state-machine */ \"(ssr)/../../node_modules/whatwg-url/lib/url-state-machine.js\").basicURLParse;\nexports.setTheUsername = __webpack_require__(/*! ./url-state-machine */ \"(ssr)/../../node_modules/whatwg-url/lib/url-state-machine.js\").setTheUsername;\nexports.setThePassword = __webpack_require__(/*! ./url-state-machine */ \"(ssr)/../../node_modules/whatwg-url/lib/url-state-machine.js\").setThePassword;\nexports.serializeHost = __webpack_require__(/*! ./url-state-machine */ \"(ssr)/../../node_modules/whatwg-url/lib/url-state-machine.js\").serializeHost;\nexports.serializeInteger = __webpack_require__(/*! ./url-state-machine */ \"(ssr)/../../node_modules/whatwg-url/lib/url-state-machine.js\").serializeInteger;\nexports.parseURL = __webpack_require__(/*! ./url-state-machine */ \"(ssr)/../../node_modules/whatwg-url/lib/url-state-machine.js\").parseURL;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL3doYXR3Zy11cmwvbGliL3B1YmxpYy1hcGkuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWJBLDZHQUF3QztBQUN4Q0Esa0pBQWtFO0FBQ2xFQSw4SkFBOEU7QUFDOUVBLG9KQUFvRTtBQUNwRUEsc0pBQXNFO0FBQ3RFQSxzSkFBc0U7QUFDdEVBLG9KQUFvRTtBQUNwRUEsMEpBQTBFO0FBQzFFQSwwSUFBMEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZ3FjYXJzL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvd2hhdHdnLXVybC9saWIvcHVibGljLWFwaS5qcz9kNGQ5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLlVSTCA9IHJlcXVpcmUoXCIuL1VSTFwiKS5pbnRlcmZhY2U7XG5leHBvcnRzLnNlcmlhbGl6ZVVSTCA9IHJlcXVpcmUoXCIuL3VybC1zdGF0ZS1tYWNoaW5lXCIpLnNlcmlhbGl6ZVVSTDtcbmV4cG9ydHMuc2VyaWFsaXplVVJMT3JpZ2luID0gcmVxdWlyZShcIi4vdXJsLXN0YXRlLW1hY2hpbmVcIikuc2VyaWFsaXplVVJMT3JpZ2luO1xuZXhwb3J0cy5iYXNpY1VSTFBhcnNlID0gcmVxdWlyZShcIi4vdXJsLXN0YXRlLW1hY2hpbmVcIikuYmFzaWNVUkxQYXJzZTtcbmV4cG9ydHMuc2V0VGhlVXNlcm5hbWUgPSByZXF1aXJlKFwiLi91cmwtc3RhdGUtbWFjaGluZVwiKS5zZXRUaGVVc2VybmFtZTtcbmV4cG9ydHMuc2V0VGhlUGFzc3dvcmQgPSByZXF1aXJlKFwiLi91cmwtc3RhdGUtbWFjaGluZVwiKS5zZXRUaGVQYXNzd29yZDtcbmV4cG9ydHMuc2VyaWFsaXplSG9zdCA9IHJlcXVpcmUoXCIuL3VybC1zdGF0ZS1tYWNoaW5lXCIpLnNlcmlhbGl6ZUhvc3Q7XG5leHBvcnRzLnNlcmlhbGl6ZUludGVnZXIgPSByZXF1aXJlKFwiLi91cmwtc3RhdGUtbWFjaGluZVwiKS5zZXJpYWxpemVJbnRlZ2VyO1xuZXhwb3J0cy5wYXJzZVVSTCA9IHJlcXVpcmUoXCIuL3VybC1zdGF0ZS1tYWNoaW5lXCIpLnBhcnNlVVJMO1xuIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJVUkwiLCJyZXF1aXJlIiwiaW50ZXJmYWNlIiwic2VyaWFsaXplVVJMIiwic2VyaWFsaXplVVJMT3JpZ2luIiwiYmFzaWNVUkxQYXJzZSIsInNldFRoZVVzZXJuYW1lIiwic2V0VGhlUGFzc3dvcmQiLCJzZXJpYWxpemVIb3N0Iiwic2VyaWFsaXplSW50ZWdlciIsInBhcnNlVVJMIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/whatwg-url/lib/public-api.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/whatwg-url/lib/url-state-machine.js":
/*!**************************************************************!*\
  !*** ../../node_modules/whatwg-url/lib/url-state-machine.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst punycode = __webpack_require__(/*! punycode */ \"punycode\");\nconst tr46 = __webpack_require__(/*! tr46 */ \"(ssr)/../../node_modules/tr46/index.js\");\nconst specialSchemes = {\n  ftp: 21,\n  file: null,\n  gopher: 70,\n  http: 80,\n  https: 443,\n  ws: 80,\n  wss: 443\n};\nconst failure = Symbol(\"failure\");\nfunction countSymbols(str) {\n  return punycode.ucs2.decode(str).length;\n}\nfunction at(input, idx) {\n  const c = input[idx];\n  return isNaN(c) ? undefined : String.fromCodePoint(c);\n}\nfunction isASCIIDigit(c) {\n  return c >= 0x30 && c <= 0x39;\n}\nfunction isASCIIAlpha(c) {\n  return c >= 0x41 && c <= 0x5A || c >= 0x61 && c <= 0x7A;\n}\nfunction isASCIIAlphanumeric(c) {\n  return isASCIIAlpha(c) || isASCIIDigit(c);\n}\nfunction isASCIIHex(c) {\n  return isASCIIDigit(c) || c >= 0x41 && c <= 0x46 || c >= 0x61 && c <= 0x66;\n}\nfunction isSingleDot(buffer) {\n  return buffer === \".\" || buffer.toLowerCase() === \"%2e\";\n}\nfunction isDoubleDot(buffer) {\n  buffer = buffer.toLowerCase();\n  return buffer === \"..\" || buffer === \"%2e.\" || buffer === \".%2e\" || buffer === \"%2e%2e\";\n}\nfunction isWindowsDriveLetterCodePoints(cp1, cp2) {\n  return isASCIIAlpha(cp1) && (cp2 === 58 || cp2 === 124);\n}\nfunction isWindowsDriveLetterString(string) {\n  return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && (string[1] === \":\" || string[1] === \"|\");\n}\nfunction isNormalizedWindowsDriveLetterString(string) {\n  return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && string[1] === \":\";\n}\nfunction containsForbiddenHostCodePoint(string) {\n  return string.search(/\\u0000|\\u0009|\\u000A|\\u000D|\\u0020|#|%|\\/|:|\\?|@|\\[|\\\\|\\]/) !== -1;\n}\nfunction containsForbiddenHostCodePointExcludingPercent(string) {\n  return string.search(/\\u0000|\\u0009|\\u000A|\\u000D|\\u0020|#|\\/|:|\\?|@|\\[|\\\\|\\]/) !== -1;\n}\nfunction isSpecialScheme(scheme) {\n  return specialSchemes[scheme] !== undefined;\n}\nfunction isSpecial(url) {\n  return isSpecialScheme(url.scheme);\n}\nfunction defaultPort(scheme) {\n  return specialSchemes[scheme];\n}\nfunction percentEncode(c) {\n  let hex = c.toString(16).toUpperCase();\n  if (hex.length === 1) {\n    hex = \"0\" + hex;\n  }\n  return \"%\" + hex;\n}\nfunction utf8PercentEncode(c) {\n  const buf = new Buffer(c);\n  let str = \"\";\n  for (let i = 0; i < buf.length; ++i) {\n    str += percentEncode(buf[i]);\n  }\n  return str;\n}\nfunction utf8PercentDecode(str) {\n  const input = new Buffer(str);\n  const output = [];\n  for (let i = 0; i < input.length; ++i) {\n    if (input[i] !== 37) {\n      output.push(input[i]);\n    } else if (input[i] === 37 && isASCIIHex(input[i + 1]) && isASCIIHex(input[i + 2])) {\n      output.push(parseInt(input.slice(i + 1, i + 3).toString(), 16));\n      i += 2;\n    } else {\n      output.push(input[i]);\n    }\n  }\n  return new Buffer(output).toString();\n}\nfunction isC0ControlPercentEncode(c) {\n  return c <= 0x1F || c > 0x7E;\n}\nconst extraPathPercentEncodeSet = new Set([32, 34, 35, 60, 62, 63, 96, 123, 125]);\nfunction isPathPercentEncode(c) {\n  return isC0ControlPercentEncode(c) || extraPathPercentEncodeSet.has(c);\n}\nconst extraUserinfoPercentEncodeSet = new Set([47, 58, 59, 61, 64, 91, 92, 93, 94, 124]);\nfunction isUserinfoPercentEncode(c) {\n  return isPathPercentEncode(c) || extraUserinfoPercentEncodeSet.has(c);\n}\nfunction percentEncodeChar(c, encodeSetPredicate) {\n  const cStr = String.fromCodePoint(c);\n  if (encodeSetPredicate(c)) {\n    return utf8PercentEncode(cStr);\n  }\n  return cStr;\n}\nfunction parseIPv4Number(input) {\n  let R = 10;\n  if (input.length >= 2 && input.charAt(0) === \"0\" && input.charAt(1).toLowerCase() === \"x\") {\n    input = input.substring(2);\n    R = 16;\n  } else if (input.length >= 2 && input.charAt(0) === \"0\") {\n    input = input.substring(1);\n    R = 8;\n  }\n  if (input === \"\") {\n    return 0;\n  }\n  const regex = R === 10 ? /[^0-9]/ : R === 16 ? /[^0-9A-Fa-f]/ : /[^0-7]/;\n  if (regex.test(input)) {\n    return failure;\n  }\n  return parseInt(input, R);\n}\nfunction parseIPv4(input) {\n  const parts = input.split(\".\");\n  if (parts[parts.length - 1] === \"\") {\n    if (parts.length > 1) {\n      parts.pop();\n    }\n  }\n  if (parts.length > 4) {\n    return input;\n  }\n  const numbers = [];\n  for (const part of parts) {\n    if (part === \"\") {\n      return input;\n    }\n    const n = parseIPv4Number(part);\n    if (n === failure) {\n      return input;\n    }\n    numbers.push(n);\n  }\n  for (let i = 0; i < numbers.length - 1; ++i) {\n    if (numbers[i] > 255) {\n      return failure;\n    }\n  }\n  if (numbers[numbers.length - 1] >= Math.pow(256, 5 - numbers.length)) {\n    return failure;\n  }\n  let ipv4 = numbers.pop();\n  let counter = 0;\n  for (const n of numbers) {\n    ipv4 += n * Math.pow(256, 3 - counter);\n    ++counter;\n  }\n  return ipv4;\n}\nfunction serializeIPv4(address) {\n  let output = \"\";\n  let n = address;\n  for (let i = 1; i <= 4; ++i) {\n    output = String(n % 256) + output;\n    if (i !== 4) {\n      output = \".\" + output;\n    }\n    n = Math.floor(n / 256);\n  }\n  return output;\n}\nfunction parseIPv6(input) {\n  const address = [0, 0, 0, 0, 0, 0, 0, 0];\n  let pieceIndex = 0;\n  let compress = null;\n  let pointer = 0;\n  input = punycode.ucs2.decode(input);\n  if (input[pointer] === 58) {\n    if (input[pointer + 1] !== 58) {\n      return failure;\n    }\n    pointer += 2;\n    ++pieceIndex;\n    compress = pieceIndex;\n  }\n  while (pointer < input.length) {\n    if (pieceIndex === 8) {\n      return failure;\n    }\n    if (input[pointer] === 58) {\n      if (compress !== null) {\n        return failure;\n      }\n      ++pointer;\n      ++pieceIndex;\n      compress = pieceIndex;\n      continue;\n    }\n    let value = 0;\n    let length = 0;\n    while (length < 4 && isASCIIHex(input[pointer])) {\n      value = value * 0x10 + parseInt(at(input, pointer), 16);\n      ++pointer;\n      ++length;\n    }\n    if (input[pointer] === 46) {\n      if (length === 0) {\n        return failure;\n      }\n      pointer -= length;\n      if (pieceIndex > 6) {\n        return failure;\n      }\n      let numbersSeen = 0;\n      while (input[pointer] !== undefined) {\n        let ipv4Piece = null;\n        if (numbersSeen > 0) {\n          if (input[pointer] === 46 && numbersSeen < 4) {\n            ++pointer;\n          } else {\n            return failure;\n          }\n        }\n        if (!isASCIIDigit(input[pointer])) {\n          return failure;\n        }\n        while (isASCIIDigit(input[pointer])) {\n          const number = parseInt(at(input, pointer));\n          if (ipv4Piece === null) {\n            ipv4Piece = number;\n          } else if (ipv4Piece === 0) {\n            return failure;\n          } else {\n            ipv4Piece = ipv4Piece * 10 + number;\n          }\n          if (ipv4Piece > 255) {\n            return failure;\n          }\n          ++pointer;\n        }\n        address[pieceIndex] = address[pieceIndex] * 0x100 + ipv4Piece;\n        ++numbersSeen;\n        if (numbersSeen === 2 || numbersSeen === 4) {\n          ++pieceIndex;\n        }\n      }\n      if (numbersSeen !== 4) {\n        return failure;\n      }\n      break;\n    } else if (input[pointer] === 58) {\n      ++pointer;\n      if (input[pointer] === undefined) {\n        return failure;\n      }\n    } else if (input[pointer] !== undefined) {\n      return failure;\n    }\n    address[pieceIndex] = value;\n    ++pieceIndex;\n  }\n  if (compress !== null) {\n    let swaps = pieceIndex - compress;\n    pieceIndex = 7;\n    while (pieceIndex !== 0 && swaps > 0) {\n      const temp = address[compress + swaps - 1];\n      address[compress + swaps - 1] = address[pieceIndex];\n      address[pieceIndex] = temp;\n      --pieceIndex;\n      --swaps;\n    }\n  } else if (compress === null && pieceIndex !== 8) {\n    return failure;\n  }\n  return address;\n}\nfunction serializeIPv6(address) {\n  let output = \"\";\n  const seqResult = findLongestZeroSequence(address);\n  const compress = seqResult.idx;\n  let ignore0 = false;\n  for (let pieceIndex = 0; pieceIndex <= 7; ++pieceIndex) {\n    if (ignore0 && address[pieceIndex] === 0) {\n      continue;\n    } else if (ignore0) {\n      ignore0 = false;\n    }\n    if (compress === pieceIndex) {\n      const separator = pieceIndex === 0 ? \"::\" : \":\";\n      output += separator;\n      ignore0 = true;\n      continue;\n    }\n    output += address[pieceIndex].toString(16);\n    if (pieceIndex !== 7) {\n      output += \":\";\n    }\n  }\n  return output;\n}\nfunction parseHost(input, isSpecialArg) {\n  if (input[0] === \"[\") {\n    if (input[input.length - 1] !== \"]\") {\n      return failure;\n    }\n    return parseIPv6(input.substring(1, input.length - 1));\n  }\n  if (!isSpecialArg) {\n    return parseOpaqueHost(input);\n  }\n  const domain = utf8PercentDecode(input);\n  const asciiDomain = tr46.toASCII(domain, false, tr46.PROCESSING_OPTIONS.NONTRANSITIONAL, false);\n  if (asciiDomain === null) {\n    return failure;\n  }\n  if (containsForbiddenHostCodePoint(asciiDomain)) {\n    return failure;\n  }\n  const ipv4Host = parseIPv4(asciiDomain);\n  if (typeof ipv4Host === \"number\" || ipv4Host === failure) {\n    return ipv4Host;\n  }\n  return asciiDomain;\n}\nfunction parseOpaqueHost(input) {\n  if (containsForbiddenHostCodePointExcludingPercent(input)) {\n    return failure;\n  }\n  let output = \"\";\n  const decoded = punycode.ucs2.decode(input);\n  for (let i = 0; i < decoded.length; ++i) {\n    output += percentEncodeChar(decoded[i], isC0ControlPercentEncode);\n  }\n  return output;\n}\nfunction findLongestZeroSequence(arr) {\n  let maxIdx = null;\n  let maxLen = 1; // only find elements > 1\n  let currStart = null;\n  let currLen = 0;\n  for (let i = 0; i < arr.length; ++i) {\n    if (arr[i] !== 0) {\n      if (currLen > maxLen) {\n        maxIdx = currStart;\n        maxLen = currLen;\n      }\n      currStart = null;\n      currLen = 0;\n    } else {\n      if (currStart === null) {\n        currStart = i;\n      }\n      ++currLen;\n    }\n  }\n\n  // if trailing zeros\n  if (currLen > maxLen) {\n    maxIdx = currStart;\n    maxLen = currLen;\n  }\n  return {\n    idx: maxIdx,\n    len: maxLen\n  };\n}\nfunction serializeHost(host) {\n  if (typeof host === \"number\") {\n    return serializeIPv4(host);\n  }\n\n  // IPv6 serializer\n  if (host instanceof Array) {\n    return \"[\" + serializeIPv6(host) + \"]\";\n  }\n  return host;\n}\nfunction trimControlChars(url) {\n  return url.replace(/^[\\u0000-\\u001F\\u0020]+|[\\u0000-\\u001F\\u0020]+$/g, \"\");\n}\nfunction trimTabAndNewline(url) {\n  return url.replace(/\\u0009|\\u000A|\\u000D/g, \"\");\n}\nfunction shortenPath(url) {\n  const path = url.path;\n  if (path.length === 0) {\n    return;\n  }\n  if (url.scheme === \"file\" && path.length === 1 && isNormalizedWindowsDriveLetter(path[0])) {\n    return;\n  }\n  path.pop();\n}\nfunction includesCredentials(url) {\n  return url.username !== \"\" || url.password !== \"\";\n}\nfunction cannotHaveAUsernamePasswordPort(url) {\n  return url.host === null || url.host === \"\" || url.cannotBeABaseURL || url.scheme === \"file\";\n}\nfunction isNormalizedWindowsDriveLetter(string) {\n  return /^[A-Za-z]:$/.test(string);\n}\nfunction URLStateMachine(input, base, encodingOverride, url, stateOverride) {\n  this.pointer = 0;\n  this.input = input;\n  this.base = base || null;\n  this.encodingOverride = encodingOverride || \"utf-8\";\n  this.stateOverride = stateOverride;\n  this.url = url;\n  this.failure = false;\n  this.parseError = false;\n  if (!this.url) {\n    this.url = {\n      scheme: \"\",\n      username: \"\",\n      password: \"\",\n      host: null,\n      port: null,\n      path: [],\n      query: null,\n      fragment: null,\n      cannotBeABaseURL: false\n    };\n    const res = trimControlChars(this.input);\n    if (res !== this.input) {\n      this.parseError = true;\n    }\n    this.input = res;\n  }\n  const res = trimTabAndNewline(this.input);\n  if (res !== this.input) {\n    this.parseError = true;\n  }\n  this.input = res;\n  this.state = stateOverride || \"scheme start\";\n  this.buffer = \"\";\n  this.atFlag = false;\n  this.arrFlag = false;\n  this.passwordTokenSeenFlag = false;\n  this.input = punycode.ucs2.decode(this.input);\n  for (; this.pointer <= this.input.length; ++this.pointer) {\n    const c = this.input[this.pointer];\n    const cStr = isNaN(c) ? undefined : String.fromCodePoint(c);\n\n    // exec state machine\n    const ret = this[\"parse \" + this.state](c, cStr);\n    if (!ret) {\n      break; // terminate algorithm\n    } else if (ret === failure) {\n      this.failure = true;\n      break;\n    }\n  }\n}\nURLStateMachine.prototype[\"parse scheme start\"] = function parseSchemeStart(c, cStr) {\n  if (isASCIIAlpha(c)) {\n    this.buffer += cStr.toLowerCase();\n    this.state = \"scheme\";\n  } else if (!this.stateOverride) {\n    this.state = \"no scheme\";\n    --this.pointer;\n  } else {\n    this.parseError = true;\n    return failure;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse scheme\"] = function parseScheme(c, cStr) {\n  if (isASCIIAlphanumeric(c) || c === 43 || c === 45 || c === 46) {\n    this.buffer += cStr.toLowerCase();\n  } else if (c === 58) {\n    if (this.stateOverride) {\n      if (isSpecial(this.url) && !isSpecialScheme(this.buffer)) {\n        return false;\n      }\n      if (!isSpecial(this.url) && isSpecialScheme(this.buffer)) {\n        return false;\n      }\n      if ((includesCredentials(this.url) || this.url.port !== null) && this.buffer === \"file\") {\n        return false;\n      }\n      if (this.url.scheme === \"file\" && (this.url.host === \"\" || this.url.host === null)) {\n        return false;\n      }\n    }\n    this.url.scheme = this.buffer;\n    this.buffer = \"\";\n    if (this.stateOverride) {\n      return false;\n    }\n    if (this.url.scheme === \"file\") {\n      if (this.input[this.pointer + 1] !== 47 || this.input[this.pointer + 2] !== 47) {\n        this.parseError = true;\n      }\n      this.state = \"file\";\n    } else if (isSpecial(this.url) && this.base !== null && this.base.scheme === this.url.scheme) {\n      this.state = \"special relative or authority\";\n    } else if (isSpecial(this.url)) {\n      this.state = \"special authority slashes\";\n    } else if (this.input[this.pointer + 1] === 47) {\n      this.state = \"path or authority\";\n      ++this.pointer;\n    } else {\n      this.url.cannotBeABaseURL = true;\n      this.url.path.push(\"\");\n      this.state = \"cannot-be-a-base-URL path\";\n    }\n  } else if (!this.stateOverride) {\n    this.buffer = \"\";\n    this.state = \"no scheme\";\n    this.pointer = -1;\n  } else {\n    this.parseError = true;\n    return failure;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse no scheme\"] = function parseNoScheme(c) {\n  if (this.base === null || this.base.cannotBeABaseURL && c !== 35) {\n    return failure;\n  } else if (this.base.cannotBeABaseURL && c === 35) {\n    this.url.scheme = this.base.scheme;\n    this.url.path = this.base.path.slice();\n    this.url.query = this.base.query;\n    this.url.fragment = \"\";\n    this.url.cannotBeABaseURL = true;\n    this.state = \"fragment\";\n  } else if (this.base.scheme === \"file\") {\n    this.state = \"file\";\n    --this.pointer;\n  } else {\n    this.state = \"relative\";\n    --this.pointer;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse special relative or authority\"] = function parseSpecialRelativeOrAuthority(c) {\n  if (c === 47 && this.input[this.pointer + 1] === 47) {\n    this.state = \"special authority ignore slashes\";\n    ++this.pointer;\n  } else {\n    this.parseError = true;\n    this.state = \"relative\";\n    --this.pointer;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse path or authority\"] = function parsePathOrAuthority(c) {\n  if (c === 47) {\n    this.state = \"authority\";\n  } else {\n    this.state = \"path\";\n    --this.pointer;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse relative\"] = function parseRelative(c) {\n  this.url.scheme = this.base.scheme;\n  if (isNaN(c)) {\n    this.url.username = this.base.username;\n    this.url.password = this.base.password;\n    this.url.host = this.base.host;\n    this.url.port = this.base.port;\n    this.url.path = this.base.path.slice();\n    this.url.query = this.base.query;\n  } else if (c === 47) {\n    this.state = \"relative slash\";\n  } else if (c === 63) {\n    this.url.username = this.base.username;\n    this.url.password = this.base.password;\n    this.url.host = this.base.host;\n    this.url.port = this.base.port;\n    this.url.path = this.base.path.slice();\n    this.url.query = \"\";\n    this.state = \"query\";\n  } else if (c === 35) {\n    this.url.username = this.base.username;\n    this.url.password = this.base.password;\n    this.url.host = this.base.host;\n    this.url.port = this.base.port;\n    this.url.path = this.base.path.slice();\n    this.url.query = this.base.query;\n    this.url.fragment = \"\";\n    this.state = \"fragment\";\n  } else if (isSpecial(this.url) && c === 92) {\n    this.parseError = true;\n    this.state = \"relative slash\";\n  } else {\n    this.url.username = this.base.username;\n    this.url.password = this.base.password;\n    this.url.host = this.base.host;\n    this.url.port = this.base.port;\n    this.url.path = this.base.path.slice(0, this.base.path.length - 1);\n    this.state = \"path\";\n    --this.pointer;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse relative slash\"] = function parseRelativeSlash(c) {\n  if (isSpecial(this.url) && (c === 47 || c === 92)) {\n    if (c === 92) {\n      this.parseError = true;\n    }\n    this.state = \"special authority ignore slashes\";\n  } else if (c === 47) {\n    this.state = \"authority\";\n  } else {\n    this.url.username = this.base.username;\n    this.url.password = this.base.password;\n    this.url.host = this.base.host;\n    this.url.port = this.base.port;\n    this.state = \"path\";\n    --this.pointer;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse special authority slashes\"] = function parseSpecialAuthoritySlashes(c) {\n  if (c === 47 && this.input[this.pointer + 1] === 47) {\n    this.state = \"special authority ignore slashes\";\n    ++this.pointer;\n  } else {\n    this.parseError = true;\n    this.state = \"special authority ignore slashes\";\n    --this.pointer;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse special authority ignore slashes\"] = function parseSpecialAuthorityIgnoreSlashes(c) {\n  if (c !== 47 && c !== 92) {\n    this.state = \"authority\";\n    --this.pointer;\n  } else {\n    this.parseError = true;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse authority\"] = function parseAuthority(c, cStr) {\n  if (c === 64) {\n    this.parseError = true;\n    if (this.atFlag) {\n      this.buffer = \"%40\" + this.buffer;\n    }\n    this.atFlag = true;\n\n    // careful, this is based on buffer and has its own pointer (this.pointer != pointer) and inner chars\n    const len = countSymbols(this.buffer);\n    for (let pointer = 0; pointer < len; ++pointer) {\n      const codePoint = this.buffer.codePointAt(pointer);\n      if (codePoint === 58 && !this.passwordTokenSeenFlag) {\n        this.passwordTokenSeenFlag = true;\n        continue;\n      }\n      const encodedCodePoints = percentEncodeChar(codePoint, isUserinfoPercentEncode);\n      if (this.passwordTokenSeenFlag) {\n        this.url.password += encodedCodePoints;\n      } else {\n        this.url.username += encodedCodePoints;\n      }\n    }\n    this.buffer = \"\";\n  } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92) {\n    if (this.atFlag && this.buffer === \"\") {\n      this.parseError = true;\n      return failure;\n    }\n    this.pointer -= countSymbols(this.buffer) + 1;\n    this.buffer = \"\";\n    this.state = \"host\";\n  } else {\n    this.buffer += cStr;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse hostname\"] = URLStateMachine.prototype[\"parse host\"] = function parseHostName(c, cStr) {\n  if (this.stateOverride && this.url.scheme === \"file\") {\n    --this.pointer;\n    this.state = \"file host\";\n  } else if (c === 58 && !this.arrFlag) {\n    if (this.buffer === \"\") {\n      this.parseError = true;\n      return failure;\n    }\n    const host = parseHost(this.buffer, isSpecial(this.url));\n    if (host === failure) {\n      return failure;\n    }\n    this.url.host = host;\n    this.buffer = \"\";\n    this.state = \"port\";\n    if (this.stateOverride === \"hostname\") {\n      return false;\n    }\n  } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92) {\n    --this.pointer;\n    if (isSpecial(this.url) && this.buffer === \"\") {\n      this.parseError = true;\n      return failure;\n    } else if (this.stateOverride && this.buffer === \"\" && (includesCredentials(this.url) || this.url.port !== null)) {\n      this.parseError = true;\n      return false;\n    }\n    const host = parseHost(this.buffer, isSpecial(this.url));\n    if (host === failure) {\n      return failure;\n    }\n    this.url.host = host;\n    this.buffer = \"\";\n    this.state = \"path start\";\n    if (this.stateOverride) {\n      return false;\n    }\n  } else {\n    if (c === 91) {\n      this.arrFlag = true;\n    } else if (c === 93) {\n      this.arrFlag = false;\n    }\n    this.buffer += cStr;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse port\"] = function parsePort(c, cStr) {\n  if (isASCIIDigit(c)) {\n    this.buffer += cStr;\n  } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92 || this.stateOverride) {\n    if (this.buffer !== \"\") {\n      const port = parseInt(this.buffer);\n      if (port > Math.pow(2, 16) - 1) {\n        this.parseError = true;\n        return failure;\n      }\n      this.url.port = port === defaultPort(this.url.scheme) ? null : port;\n      this.buffer = \"\";\n    }\n    if (this.stateOverride) {\n      return false;\n    }\n    this.state = \"path start\";\n    --this.pointer;\n  } else {\n    this.parseError = true;\n    return failure;\n  }\n  return true;\n};\nconst fileOtherwiseCodePoints = new Set([47, 92, 63, 35]);\nURLStateMachine.prototype[\"parse file\"] = function parseFile(c) {\n  this.url.scheme = \"file\";\n  if (c === 47 || c === 92) {\n    if (c === 92) {\n      this.parseError = true;\n    }\n    this.state = \"file slash\";\n  } else if (this.base !== null && this.base.scheme === \"file\") {\n    if (isNaN(c)) {\n      this.url.host = this.base.host;\n      this.url.path = this.base.path.slice();\n      this.url.query = this.base.query;\n    } else if (c === 63) {\n      this.url.host = this.base.host;\n      this.url.path = this.base.path.slice();\n      this.url.query = \"\";\n      this.state = \"query\";\n    } else if (c === 35) {\n      this.url.host = this.base.host;\n      this.url.path = this.base.path.slice();\n      this.url.query = this.base.query;\n      this.url.fragment = \"\";\n      this.state = \"fragment\";\n    } else {\n      if (this.input.length - this.pointer - 1 === 0 ||\n      // remaining consists of 0 code points\n      !isWindowsDriveLetterCodePoints(c, this.input[this.pointer + 1]) || this.input.length - this.pointer - 1 >= 2 &&\n      // remaining has at least 2 code points\n      !fileOtherwiseCodePoints.has(this.input[this.pointer + 2])) {\n        this.url.host = this.base.host;\n        this.url.path = this.base.path.slice();\n        shortenPath(this.url);\n      } else {\n        this.parseError = true;\n      }\n      this.state = \"path\";\n      --this.pointer;\n    }\n  } else {\n    this.state = \"path\";\n    --this.pointer;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse file slash\"] = function parseFileSlash(c) {\n  if (c === 47 || c === 92) {\n    if (c === 92) {\n      this.parseError = true;\n    }\n    this.state = \"file host\";\n  } else {\n    if (this.base !== null && this.base.scheme === \"file\") {\n      if (isNormalizedWindowsDriveLetterString(this.base.path[0])) {\n        this.url.path.push(this.base.path[0]);\n      } else {\n        this.url.host = this.base.host;\n      }\n    }\n    this.state = \"path\";\n    --this.pointer;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse file host\"] = function parseFileHost(c, cStr) {\n  if (isNaN(c) || c === 47 || c === 92 || c === 63 || c === 35) {\n    --this.pointer;\n    if (!this.stateOverride && isWindowsDriveLetterString(this.buffer)) {\n      this.parseError = true;\n      this.state = \"path\";\n    } else if (this.buffer === \"\") {\n      this.url.host = \"\";\n      if (this.stateOverride) {\n        return false;\n      }\n      this.state = \"path start\";\n    } else {\n      let host = parseHost(this.buffer, isSpecial(this.url));\n      if (host === failure) {\n        return failure;\n      }\n      if (host === \"localhost\") {\n        host = \"\";\n      }\n      this.url.host = host;\n      if (this.stateOverride) {\n        return false;\n      }\n      this.buffer = \"\";\n      this.state = \"path start\";\n    }\n  } else {\n    this.buffer += cStr;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse path start\"] = function parsePathStart(c) {\n  if (isSpecial(this.url)) {\n    if (c === 92) {\n      this.parseError = true;\n    }\n    this.state = \"path\";\n    if (c !== 47 && c !== 92) {\n      --this.pointer;\n    }\n  } else if (!this.stateOverride && c === 63) {\n    this.url.query = \"\";\n    this.state = \"query\";\n  } else if (!this.stateOverride && c === 35) {\n    this.url.fragment = \"\";\n    this.state = \"fragment\";\n  } else if (c !== undefined) {\n    this.state = \"path\";\n    if (c !== 47) {\n      --this.pointer;\n    }\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse path\"] = function parsePath(c) {\n  if (isNaN(c) || c === 47 || isSpecial(this.url) && c === 92 || !this.stateOverride && (c === 63 || c === 35)) {\n    if (isSpecial(this.url) && c === 92) {\n      this.parseError = true;\n    }\n    if (isDoubleDot(this.buffer)) {\n      shortenPath(this.url);\n      if (c !== 47 && !(isSpecial(this.url) && c === 92)) {\n        this.url.path.push(\"\");\n      }\n    } else if (isSingleDot(this.buffer) && c !== 47 && !(isSpecial(this.url) && c === 92)) {\n      this.url.path.push(\"\");\n    } else if (!isSingleDot(this.buffer)) {\n      if (this.url.scheme === \"file\" && this.url.path.length === 0 && isWindowsDriveLetterString(this.buffer)) {\n        if (this.url.host !== \"\" && this.url.host !== null) {\n          this.parseError = true;\n          this.url.host = \"\";\n        }\n        this.buffer = this.buffer[0] + \":\";\n      }\n      this.url.path.push(this.buffer);\n    }\n    this.buffer = \"\";\n    if (this.url.scheme === \"file\" && (c === undefined || c === 63 || c === 35)) {\n      while (this.url.path.length > 1 && this.url.path[0] === \"\") {\n        this.parseError = true;\n        this.url.path.shift();\n      }\n    }\n    if (c === 63) {\n      this.url.query = \"\";\n      this.state = \"query\";\n    }\n    if (c === 35) {\n      this.url.fragment = \"\";\n      this.state = \"fragment\";\n    }\n  } else {\n    // TODO: If c is not a URL code point and not \"%\", parse error.\n\n    if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {\n      this.parseError = true;\n    }\n    this.buffer += percentEncodeChar(c, isPathPercentEncode);\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse cannot-be-a-base-URL path\"] = function parseCannotBeABaseURLPath(c) {\n  if (c === 63) {\n    this.url.query = \"\";\n    this.state = \"query\";\n  } else if (c === 35) {\n    this.url.fragment = \"\";\n    this.state = \"fragment\";\n  } else {\n    // TODO: Add: not a URL code point\n    if (!isNaN(c) && c !== 37) {\n      this.parseError = true;\n    }\n    if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {\n      this.parseError = true;\n    }\n    if (!isNaN(c)) {\n      this.url.path[0] = this.url.path[0] + percentEncodeChar(c, isC0ControlPercentEncode);\n    }\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse query\"] = function parseQuery(c, cStr) {\n  if (isNaN(c) || !this.stateOverride && c === 35) {\n    if (!isSpecial(this.url) || this.url.scheme === \"ws\" || this.url.scheme === \"wss\") {\n      this.encodingOverride = \"utf-8\";\n    }\n    const buffer = new Buffer(this.buffer); // TODO: Use encoding override instead\n    for (let i = 0; i < buffer.length; ++i) {\n      if (buffer[i] < 0x21 || buffer[i] > 0x7E || buffer[i] === 0x22 || buffer[i] === 0x23 || buffer[i] === 0x3C || buffer[i] === 0x3E) {\n        this.url.query += percentEncode(buffer[i]);\n      } else {\n        this.url.query += String.fromCodePoint(buffer[i]);\n      }\n    }\n    this.buffer = \"\";\n    if (c === 35) {\n      this.url.fragment = \"\";\n      this.state = \"fragment\";\n    }\n  } else {\n    // TODO: If c is not a URL code point and not \"%\", parse error.\n    if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {\n      this.parseError = true;\n    }\n    this.buffer += cStr;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse fragment\"] = function parseFragment(c) {\n  if (isNaN(c)) {// do nothing\n  } else if (c === 0x0) {\n    this.parseError = true;\n  } else {\n    // TODO: If c is not a URL code point and not \"%\", parse error.\n    if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {\n      this.parseError = true;\n    }\n    this.url.fragment += percentEncodeChar(c, isC0ControlPercentEncode);\n  }\n  return true;\n};\nfunction serializeURL(url, excludeFragment) {\n  let output = url.scheme + \":\";\n  if (url.host !== null) {\n    output += \"//\";\n    if (url.username !== \"\" || url.password !== \"\") {\n      output += url.username;\n      if (url.password !== \"\") {\n        output += \":\" + url.password;\n      }\n      output += \"@\";\n    }\n    output += serializeHost(url.host);\n    if (url.port !== null) {\n      output += \":\" + url.port;\n    }\n  } else if (url.host === null && url.scheme === \"file\") {\n    output += \"//\";\n  }\n  if (url.cannotBeABaseURL) {\n    output += url.path[0];\n  } else {\n    for (const string of url.path) {\n      output += \"/\" + string;\n    }\n  }\n  if (url.query !== null) {\n    output += \"?\" + url.query;\n  }\n  if (!excludeFragment && url.fragment !== null) {\n    output += \"#\" + url.fragment;\n  }\n  return output;\n}\nfunction serializeOrigin(tuple) {\n  let result = tuple.scheme + \"://\";\n  result += serializeHost(tuple.host);\n  if (tuple.port !== null) {\n    result += \":\" + tuple.port;\n  }\n  return result;\n}\nmodule.exports.serializeURL = serializeURL;\nmodule.exports.serializeURLOrigin = function (url) {\n  // https://url.spec.whatwg.org/#concept-url-origin\n  switch (url.scheme) {\n    case \"blob\":\n      try {\n        return module.exports.serializeURLOrigin(module.exports.parseURL(url.path[0]));\n      } catch (e) {\n        // serializing an opaque origin returns \"null\"\n        return \"null\";\n      }\n    case \"ftp\":\n    case \"gopher\":\n    case \"http\":\n    case \"https\":\n    case \"ws\":\n    case \"wss\":\n      return serializeOrigin({\n        scheme: url.scheme,\n        host: url.host,\n        port: url.port\n      });\n    case \"file\":\n      // spec says \"exercise to the reader\", chrome says \"file://\"\n      return \"file://\";\n    default:\n      // serializing an opaque origin returns \"null\"\n      return \"null\";\n  }\n};\nmodule.exports.basicURLParse = function (input, options) {\n  if (options === undefined) {\n    options = {};\n  }\n  const usm = new URLStateMachine(input, options.baseURL, options.encodingOverride, options.url, options.stateOverride);\n  if (usm.failure) {\n    return \"failure\";\n  }\n  return usm.url;\n};\nmodule.exports.setTheUsername = function (url, username) {\n  url.username = \"\";\n  const decoded = punycode.ucs2.decode(username);\n  for (let i = 0; i < decoded.length; ++i) {\n    url.username += percentEncodeChar(decoded[i], isUserinfoPercentEncode);\n  }\n};\nmodule.exports.setThePassword = function (url, password) {\n  url.password = \"\";\n  const decoded = punycode.ucs2.decode(password);\n  for (let i = 0; i < decoded.length; ++i) {\n    url.password += percentEncodeChar(decoded[i], isUserinfoPercentEncode);\n  }\n};\nmodule.exports.serializeHost = serializeHost;\nmodule.exports.cannotHaveAUsernamePasswordPort = cannotHaveAUsernamePasswordPort;\nmodule.exports.serializeInteger = function (integer) {\n  return String(integer);\n};\nmodule.exports.parseURL = function (input, options) {\n  if (options === undefined) {\n    options = {};\n  }\n\n  // We don't handle blobs, so this just delegates:\n  return module.exports.basicURLParse(input, {\n    baseURL: options.baseURL,\n    encodingOverride: options.encodingOverride\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/whatwg-url/lib/url-state-machine.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/whatwg-url/lib/utils.js":
/*!**************************************************!*\
  !*** ../../node_modules/whatwg-url/lib/utils.js ***!
  \**************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports.mixin = function mixin(target, source) {\n  const keys = Object.getOwnPropertyNames(source);\n  for (let i = 0; i < keys.length; ++i) {\n    Object.defineProperty(target, keys[i], Object.getOwnPropertyDescriptor(source, keys[i]));\n  }\n};\nmodule.exports.wrapperSymbol = Symbol(\"wrapper\");\nmodule.exports.implSymbol = Symbol(\"impl\");\nmodule.exports.wrapperForImpl = function (impl) {\n  return impl[module.exports.wrapperSymbol];\n};\nmodule.exports.implForWrapper = function (wrapper) {\n  return wrapper[module.exports.implSymbol];\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL3doYXR3Zy11cmwvbGliL3V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViQSxvQkFBb0IsR0FBRyxTQUFTRSxLQUFLQSxDQUFDQyxNQUFNLEVBQUVDLE1BQU0sRUFBRTtFQUNwRCxNQUFNQyxJQUFJLEdBQUdDLE1BQU0sQ0FBQ0MsbUJBQW1CLENBQUNILE1BQU0sQ0FBQztFQUMvQyxLQUFLLElBQUlJLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR0gsSUFBSSxDQUFDSSxNQUFNLEVBQUUsRUFBRUQsQ0FBQyxFQUFFO0lBQ3BDRixNQUFNLENBQUNJLGNBQWMsQ0FBQ1AsTUFBTSxFQUFFRSxJQUFJLENBQUNHLENBQUMsQ0FBQyxFQUFFRixNQUFNLENBQUNLLHdCQUF3QixDQUFDUCxNQUFNLEVBQUVDLElBQUksQ0FBQ0csQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUMxRjtBQUNGLENBQUM7QUFFRFIsNEJBQTRCLEdBQUdhLE1BQU0sQ0FBQyxTQUFTLENBQUM7QUFDaERiLHlCQUF5QixHQUFHYSxNQUFNLENBQUMsTUFBTSxDQUFDO0FBRTFDYiw2QkFBNkIsR0FBRyxVQUFVZ0IsSUFBSSxFQUFFO0VBQzlDLE9BQU9BLElBQUksQ0FBQ2hCLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDVyxhQUFhLENBQUM7QUFDM0MsQ0FBQztBQUVEWiw2QkFBNkIsR0FBRyxVQUFVa0IsT0FBTyxFQUFFO0VBQ2pELE9BQU9BLE9BQU8sQ0FBQ2xCLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDYSxVQUFVLENBQUM7QUFDM0MsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BncWNhcnMvd2ViLy4uLy4uL25vZGVfbW9kdWxlcy93aGF0d2ctdXJsL2xpYi91dGlscy5qcz8zZWQyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cy5taXhpbiA9IGZ1bmN0aW9uIG1peGluKHRhcmdldCwgc291cmNlKSB7XG4gIGNvbnN0IGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2UpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXlzW2ldLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5c1tpXSkpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cy53cmFwcGVyU3ltYm9sID0gU3ltYm9sKFwid3JhcHBlclwiKTtcbm1vZHVsZS5leHBvcnRzLmltcGxTeW1ib2wgPSBTeW1ib2woXCJpbXBsXCIpO1xuXG5tb2R1bGUuZXhwb3J0cy53cmFwcGVyRm9ySW1wbCA9IGZ1bmN0aW9uIChpbXBsKSB7XG4gIHJldHVybiBpbXBsW21vZHVsZS5leHBvcnRzLndyYXBwZXJTeW1ib2xdO1xufTtcblxubW9kdWxlLmV4cG9ydHMuaW1wbEZvcldyYXBwZXIgPSBmdW5jdGlvbiAod3JhcHBlcikge1xuICByZXR1cm4gd3JhcHBlclttb2R1bGUuZXhwb3J0cy5pbXBsU3ltYm9sXTtcbn07XG5cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwibWl4aW4iLCJ0YXJnZXQiLCJzb3VyY2UiLCJrZXlzIiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImkiLCJsZW5ndGgiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIndyYXBwZXJTeW1ib2wiLCJTeW1ib2wiLCJpbXBsU3ltYm9sIiwid3JhcHBlckZvckltcGwiLCJpbXBsIiwiaW1wbEZvcldyYXBwZXIiLCJ3cmFwcGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/whatwg-url/lib/utils.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/whatwg-url/node_modules/webidl-conversions/lib/index.js":
/*!**********************************************************************************!*\
  !*** ../../node_modules/whatwg-url/node_modules/webidl-conversions/lib/index.js ***!
  \**********************************************************************************/
/***/ ((module) => {

eval("\n\nvar conversions = {};\nmodule.exports = conversions;\nfunction sign(x) {\n  return x < 0 ? -1 : 1;\n}\nfunction evenRound(x) {\n  // Round x to the nearest integer, choosing the even integer if it lies halfway between two.\n  if (x % 1 === 0.5 && (x & 1) === 0) {\n    // [even number].5; round down (i.e. floor)\n    return Math.floor(x);\n  } else {\n    return Math.round(x);\n  }\n}\nfunction createNumberConversion(bitLength, typeOpts) {\n  if (!typeOpts.unsigned) {\n    --bitLength;\n  }\n  const lowerBound = typeOpts.unsigned ? 0 : -Math.pow(2, bitLength);\n  const upperBound = Math.pow(2, bitLength) - 1;\n  const moduloVal = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength) : Math.pow(2, bitLength);\n  const moduloBound = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength - 1) : Math.pow(2, bitLength - 1);\n  return function (V, opts) {\n    if (!opts) opts = {};\n    let x = +V;\n    if (opts.enforceRange) {\n      if (!Number.isFinite(x)) {\n        throw new TypeError(\"Argument is not a finite number\");\n      }\n      x = sign(x) * Math.floor(Math.abs(x));\n      if (x < lowerBound || x > upperBound) {\n        throw new TypeError(\"Argument is not in byte range\");\n      }\n      return x;\n    }\n    if (!isNaN(x) && opts.clamp) {\n      x = evenRound(x);\n      if (x < lowerBound) x = lowerBound;\n      if (x > upperBound) x = upperBound;\n      return x;\n    }\n    if (!Number.isFinite(x) || x === 0) {\n      return 0;\n    }\n    x = sign(x) * Math.floor(Math.abs(x));\n    x = x % moduloVal;\n    if (!typeOpts.unsigned && x >= moduloBound) {\n      return x - moduloVal;\n    } else if (typeOpts.unsigned) {\n      if (x < 0) {\n        x += moduloVal;\n      } else if (x === -0) {\n        // don't return negative zero\n        return 0;\n      }\n    }\n    return x;\n  };\n}\nconversions[\"void\"] = function () {\n  return undefined;\n};\nconversions[\"boolean\"] = function (val) {\n  return !!val;\n};\nconversions[\"byte\"] = createNumberConversion(8, {\n  unsigned: false\n});\nconversions[\"octet\"] = createNumberConversion(8, {\n  unsigned: true\n});\nconversions[\"short\"] = createNumberConversion(16, {\n  unsigned: false\n});\nconversions[\"unsigned short\"] = createNumberConversion(16, {\n  unsigned: true\n});\nconversions[\"long\"] = createNumberConversion(32, {\n  unsigned: false\n});\nconversions[\"unsigned long\"] = createNumberConversion(32, {\n  unsigned: true\n});\nconversions[\"long long\"] = createNumberConversion(32, {\n  unsigned: false,\n  moduloBitLength: 64\n});\nconversions[\"unsigned long long\"] = createNumberConversion(32, {\n  unsigned: true,\n  moduloBitLength: 64\n});\nconversions[\"double\"] = function (V) {\n  const x = +V;\n  if (!Number.isFinite(x)) {\n    throw new TypeError(\"Argument is not a finite floating-point value\");\n  }\n  return x;\n};\nconversions[\"unrestricted double\"] = function (V) {\n  const x = +V;\n  if (isNaN(x)) {\n    throw new TypeError(\"Argument is NaN\");\n  }\n  return x;\n};\n\n// not quite valid, but good enough for JS\nconversions[\"float\"] = conversions[\"double\"];\nconversions[\"unrestricted float\"] = conversions[\"unrestricted double\"];\nconversions[\"DOMString\"] = function (V, opts) {\n  if (!opts) opts = {};\n  if (opts.treatNullAsEmptyString && V === null) {\n    return \"\";\n  }\n  return String(V);\n};\nconversions[\"ByteString\"] = function (V, opts) {\n  const x = String(V);\n  let c = undefined;\n  for (let i = 0; (c = x.codePointAt(i)) !== undefined; ++i) {\n    if (c > 255) {\n      throw new TypeError(\"Argument is not a valid bytestring\");\n    }\n  }\n  return x;\n};\nconversions[\"USVString\"] = function (V) {\n  const S = String(V);\n  const n = S.length;\n  const U = [];\n  for (let i = 0; i < n; ++i) {\n    const c = S.charCodeAt(i);\n    if (c < 0xD800 || c > 0xDFFF) {\n      U.push(String.fromCodePoint(c));\n    } else if (0xDC00 <= c && c <= 0xDFFF) {\n      U.push(String.fromCodePoint(0xFFFD));\n    } else {\n      if (i === n - 1) {\n        U.push(String.fromCodePoint(0xFFFD));\n      } else {\n        const d = S.charCodeAt(i + 1);\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          const a = c & 0x3FF;\n          const b = d & 0x3FF;\n          U.push(String.fromCodePoint((2 << 15) + (2 << 9) * a + b));\n          ++i;\n        } else {\n          U.push(String.fromCodePoint(0xFFFD));\n        }\n      }\n    }\n  }\n  return U.join('');\n};\nconversions[\"Date\"] = function (V, opts) {\n  if (!(V instanceof Date)) {\n    throw new TypeError(\"Argument is not a Date object\");\n  }\n  if (isNaN(V)) {\n    return undefined;\n  }\n  return V;\n};\nconversions[\"RegExp\"] = function (V, opts) {\n  if (!(V instanceof RegExp)) {\n    V = new RegExp(V);\n  }\n  return V;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/whatwg-url/node_modules/webidl-conversions/lib/index.js\n");

/***/ })

};
;